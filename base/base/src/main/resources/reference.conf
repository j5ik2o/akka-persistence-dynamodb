j5ik2o {
  dynamo-db-defaults {
    # AWS Client Factories
    # v1
    v1-async-client-factory-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.utils.V1AsyncClientFactory$Default"
    v1-sync-client-factory-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.utils.V1SyncClientFactory$Default"
    v1-dax-async-client-factory-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.utils.V1DaxAsyncClientFactory$Default"
    v1-dax-sync-client-factory-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.utils.V1DaxSyncClientFactory$Default"
    # v2
    v2-async-client-factory-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.utils.V2AsyncClientFactory$Default"
    v2-sync-client-factory-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.utils.V2SyncClientFactory$Default"
    v2-dax-async-client-factory-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.utils.V2DaxAsyncClientFactory$Default"
    v2-dax-sync-client-factory-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.utils.V2DaxSyncClientFactory$Default"

    # write backoff
    write-backoff {
      enabled = false
      min-backoff = 3s
      max-backoff = 30s
      random-factor = 0.8
      max-restarts = 3
    }

    # read backoff
    read-backoff {
      enabled = false
      min-backoff = 3s
      max-backoff = 30s
      random-factor = 0.8
      max-restarts = 3
    }

    # aws client config
    # v2 docs: https://sdk.amazonaws.com/java/api/latest/
    # v1 docs: https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/
    dynamo-db-client {
      access-key-id = null
      secret-access-key = null
      endpoint = null
      region = null
      # aws client version: "v2" or "v1"
      client-version = "v2"
      # aws client type: "async" or "sync"
      client-type = "async"
      v1 {
        # specify the dispatcher used by the v1 client.
        dispatcher-name = null
        # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html
        client-configuration {
          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setConnectionTimeout-int-
          connection-timeout = 2000ms

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setMaxConnections-int-
          max-connections = 50

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setMaxErrorRetry-int-
          max-error-retry = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setRetryMode-com.amazonaws.retry.RetryMode-
          retry-mode = null

          # specify the name of the provider class to generate the `RetryPolicy`. Normally, you do not need to change this setting.
          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/retry/RetryPolicy.html
          retry-policy-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v1.RetryPolicyProvider$Default"

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setUseThrottleRetries-boolean-
          use-throttle-retries = true

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setLocalAddress-java.net.InetAddress-
          local-address = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setProtocol-com.amazonaws.Protocol-
          protocol = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setSocketTimeout-int-
          socket-timeout = 50000ms

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setRequestTimeout-int-
          request-timeout = 60000ms

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setClientExecutionTimeout-int-
          client-execution-timeout = 0s

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setUserAgentPrefix-java.lang.String-
          user-agent-prefix = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setUserAgentSuffix-java.lang.String-
          user-agent-suffix = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setUseReaper-boolean-
          use-reaper = true

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setUseGzip-boolean-
          use-gzip = false

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setSocketBufferSizeHints-int-int-
          socket-send-buffer-size-hint = null
          socket-receive-buffer-size-hint = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setSignerOverride-java.lang.String-
          signer-override = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setResponseMetadataCacheSize-int-
          response-metadata-cache-size = 50

          # specify the name of the provider class to generate the `DnsResolver`. Normally, you do not need to change this setting.
          dns-resolver-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v1.DnsResolverProvider$Default"

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/DnsResolver.html
          dns-resolver-class-name = null

          # if true, `SecureRandomProvider` is used to generate `SecureRandom` and set it.
          use-secure-random = false

          # specify the name of the provider class to generate the `SecureRandom`. Normally, you do not need to change this setting.
          secure-random-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v1.SecureRandomProvider$Default"

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setUseExpectContinue-boolean-
          use-expect-continue = true

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setCacheResponseMetadata-boolean-
          cache-response-metadata = true

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setConnectionTTL-long-
          connection-ttl = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setConnectionMaxIdleMillis-long-
          connection-max-idle = 60000ms

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setValidateAfterInactivityMillis-int-
          validate-after-inactivity = 5000ms

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setUseTcpKeepAlive-boolean-
          use-tcp-keep-alive = false

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#addHeader-java.lang.String-java.lang.String-
          headers = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setMaxConsecutiveRetriesBeforeThrottling-int-
          max-consecutive-retries-before-throttling = 100

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setDisableHostPrefixInjection-boolean-
          disable-host-prefix-injection = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setProxyProtocol-com.amazonaws.Protocol-
          proxy-protocol = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setProxyHost-java.lang.String-
          proxy-host = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setProxyPort-int-
          proxy-port = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setDisableSocketProxy-boolean-
          disable-socket-proxy = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setProxyUsername-java.lang.String-
          proxy-username = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setProxyPassword-java.lang.String-
          proxy-password = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setProxyDomain-java.lang.String-
          proxy-domain = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setProxyWorkstation-java.lang.String-
          proxy-workstation = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setNonProxyHosts-java.lang.String-
          non-proxy-hosts = null

          # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setProxyAuthenticationMethods-java.util.List-
          proxy-authentication-methods = null
        }

        # specify the name of the provider class to generate the `RequestMetricCollector`. Normally, you do not need to change this setting.
        request-metric-collector-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v1.RequestMetricCollectorProvider$Default"

        # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/metrics/RequestMetricCollector.html
        request-metric-collector-class-name = null

        # specify the name of the provider class to generate the `MonitoringListener`. Normally, you do not need to change this setting.
        monitoring-listener-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v1.MonitoringListenerProvider$Default"

        # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/monitoring/MonitoringListener.html
        monitoring-listener-class-name = null

        # specify the name of the provider class to generate the `RequestHandler` set. Normally, you do not need to change this setting.
        request-handlers-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v1.RequestHandlersProvider$Default"

        # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/handlers/RequestHandler2.html
        request-handlers-class-name = null

        # specify the name of the provider class to generate the `CsmConfigurationProvider`. Normally, you do not need to change this setting.
        csm-configuration-provider-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v1.CsmConfigurationProviderProvider$Default"

        # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/monitoring/CsmConfigurationProvider.html
        csm-configuration-provider-class-name = null

        # specify the name of the provider class to generate the `AWSCredentialsProvider`. Normally, you do not need to change this setting.
        aws-credentials-provider-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v1.AWSCredentialsProviderProvider$Default"

        # https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/AWSCredentialsProvider.html
        aws-credentials-provider-class-name = null
      }
      v1-dax {
        # specify the dispatcher used by the v1-dax client.
        dispatcher-name = null

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setConnectTimeout-long-java.util.concurrent.TimeUnit-
        connection-timeout = 2000ms

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setRequestTimeout-long-java.util.concurrent.TimeUnit-
        request-timeout = 60000ms

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setHealthCheckTimeout-long-java.util.concurrent.TimeUnit-
        health-check-timeout = 1000ms

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setHealthCheckInterval-long-java.util.concurrent.TimeUnit-
        health-check-interval = 5000ms

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setIdleConnectionTimeout-long-java.util.concurrent.TimeUnit-
        idle-connection-timeout = 30000ms

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setMinIdleConnectionSize-int-
        min-idle-connection-size = 1

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setWriteRetries-int-
        write-retries = 2

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setMaxPendingConnectsPerHost-int-
        max-pending-connections-per-host = 10

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setReadRetries-int-
        read-retries = 2

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setThreadKeepAlive-long-java.util.concurrent.TimeUnit-
        thread-keep-alive = 10000ms

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setClusterUpdateInterval-long-java.util.concurrent.TimeUnit-
        cluster-update-interval = 4000ms

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setClusterUpdateThreshold-long-java.util.concurrent.TimeUnit-
        cluster-update-threshold = 125ms

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setMaxRetryDelay-long-java.util.concurrent.TimeUnit-
        max-retry-delay = 7000ms

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setUnhealthyConsecutiveErrorCount-int-
        unhealthy-consecutive-error-count = 5

        # specify the name of the provider class to generate the `AWSCredentialsProvider`. Normally, you do not need to change this setting.
        aws-credentials-provider-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v1.AWSCredentialsProviderProvider$Default"

        # http://dax-sdk.s3-website-us-west-2.amazonaws.com/javadocs/hosted/com/amazon/dax/client/dynamodbv2/ClientConfig.html#setCredentialsProvider-com.amazonaws.auth.AWSCredentialsProvider-
        aws-credentials-provider-class-name = null
      }
      v2 {
        async {
          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.Builder.html#maxConcurrency-java.lang.Integer-
          max-concurrency = 50

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.Builder.html#maxPendingConnectionAcquires-java.lang.Integer-
          max-pending-connection-acquires = 10000

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.Builder.html#readTimeout-java.time.Duration-
          read-timeout = 30s

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.Builder.html#writeTimeout-java.time.Duration-
          write-timeout = 30s

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.Builder.html#connectionTimeout-java.time.Duration-
          connection-timeout = 2000ms

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.Builder.html#connectionAcquisitionTimeout-java.time.Duration-
          connection-acquisition-timeout = 10s

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.Builder.html#connectionTimeToLive-java.time.Duration-
          connection-time-to-live = 0s

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.Builder.html#connectionMaxIdleTime-java.time.Duration-
          max-idle-connection-timeout = 60s

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.Builder.html#useIdleConnectionReaper-java.lang.Boolean-
          use-connection-reaper = true

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.Builder.html#eventLoopGroup-software.amazon.awssdk.http.nio.netty.SdkEventLoopGroup-
          threads-of-event-loop-group = null

          # if true, use http2
          use-http2 = false

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/Http2Configuration.Builder.html#maxStreams-java.lang.Long-
          http2-max-streams = 4294967295

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/Http2Configuration.Builder.html#initialWindowSize-java.lang.Integer-
          http2-initial-window-size = 1048576

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/Http2Configuration.Builder.html#healthCheckPingPeriod-java.time.Duration-
          http2-health-check-ping-period = null
        }
        sync {
          # specify the dispatcher used by the v2 sync client.
          dispatcher-name = null

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.Builder.html#socketTimeout-java.time.Duration-
          socket-timeout = 50000ms

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.Builder.html#connectionTimeout-java.time.Duration-
          connection-timeout = 2000ms

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.Builder.html#connectionAcquisitionTimeout-java.time.Duration-
          connection-acquisition-timeout = 10s

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.Builder.html#maxConnections-java.lang.Integer-
          max-connections = 50

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.Builder.html#localAddress-java.net.InetAddress-
          local-address = null

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.Builder.html#expectContinueEnabled-java.lang.Boolean-
          expect-continue-enabled = null

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.Builder.html#connectionTimeToLive-java.time.Duration-
          connection-time-to-live = 0s

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.Builder.html#connectionMaxIdleTime-java.time.Duration-
          max-idle-connection-timeout = 60s

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.Builder.html#tcpKeepAlive-java.lang.Boolean-
          use-tcp-keep-alive = false

          # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.Builder.html#useIdleConnectionReaper-java.lang.Boolean-
          use-connection-reaper = true
        }

        # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/core/client/config/ClientOverrideConfiguration.Builder.html#headers-java.util.Map-
        headers = null

        # specify the name of the provider class to generate the `RetryPolicy`. Normally, you do not need to change this setting.
        # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/core/retry/RetryPolicy.html
        retry-policy-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v2.RetryPolicyProvider$Default"

        # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/core/client/config/ClientOverrideConfiguration.Builder.html#retryPolicy-software.amazon.awssdk.core.retry.RetryMode-
        retry-mode = null

        # specify the name of the provider class to generate the `ExecutionInterceptor` set. Normally, you do not need to change this setting.
        execution-interceptor-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v2.ExecutionInterceptorsProvider$Default"

        # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/core/interceptor/ExecutionInterceptor.html
        execution-interceptor-class-names = null

        # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/core/client/config/ClientOverrideConfiguration.Builder.html#apiCallTimeout-java.time.Duration-
        api-call-timeout = null

        # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/core/client/config/ClientOverrideConfiguration.Builder.html#apiCallAttemptTimeout-java.time.Duration-
        api-call-attempt-timeout = null

        # specify the name of the provider class to generate the `MetricPublisher` set. Normally, you do not need to change this setting.
        metric-publishers-provider-class-names = "com.github.j5ik2o.akka.persistence.dynamodb.client.v2.MetricPublishersProvider$Default"

        # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/metrics/MetricPublisher.html
        metric-publisher-class-names = null

        # specify the name of the provider class to generate the `AwsCredentialsProvider`. Normally, you do not need to change this setting.
        aws-credentials-provider-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v2.AwsCredentialsProviderProvider$Default"

        # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/auth/credentials/AwsCredentialsProvider.html
        aws-credentials-provider-class-name = null
      }
      v2-dax {
        # specify the dispatcher used by the v2-dax client.
        dispatcher-name = null

        # configurations corresponding to `software.amazon.dax.Configuration`
        # for more information, please see the following documents
        # https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/DAX.client.run-application-java.html
        idle-timeout = 30000ms
        connection-ttl = 0s
        connection-timeout = 2000ms
        request-timeout = 60000ms
        write-retries = 2
        read-retries = 2
        cluster-update-interval = 4000ms
        endpoint-refresh-timeout = 6000ms
        max-pending-connection-acquires = 10000
        max-concurrency = 1000
        skip-host-name-verification = false
        url = null

        # specify the name of the provider class to generate the `MetricPublisher` set. Normally, you do not need to change this setting.
        metric-publishers-provider-class-names = "com.github.j5ik2o.akka.persistence.dynamodb.client.v2.MetricPublishersProvider$Default"

        # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/metrics/MetricPublisher.html
        metric-publisher-class-names = null

        # specify the name of the provider class to generate the `AwsCredentialsProvider` set. Normally, you do not need to change this setting.
        aws-credentials-provider-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.client.v2.AwsCredentialsProviderProvider$Default"

        # https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/auth/credentials/AwsCredentialsProvider.html
        aws-credentials-provider-class-name = null
      }

      # the limit of BatchGetItem (1 <= the limit value <= 100)
      batch-get-item-limit = 100

      # the limit of BatchWriteItem  (1 <= the limit value <= 25)
      batch-write-item-limit = 25
    }

    # specify the name of the provider class to generate the `MetricsReporter` set. Normally, you do not need to change this setting.
    metrics-reporter-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.metrics.MetricsReporterProvider$Default"
    # `MetricsReporter` is used to collect metrics.
    metrics-reporter-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.metrics.MetricsReporter$None"

    # specify the name of the provider class to generate the `TraceReporterProvider` set. Normally, you do not need to change this setting.
    trace-reporter-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.trace.TraceReporterProvider$Default"
    # `TraceReporter` is used to tracing.
    trace-reporter-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.trace.TraceReporter$None"
  }
}
