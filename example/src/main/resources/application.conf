akka {
  stdout-loglevel = off // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = on
  loglevel = "INFO"
  log-dead-letters = on
  log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  test {
    timefactor = 1.0
    filter-leeway = 999s
    single-expect-default = 999s
    default-timeout = 999s

    calling-thread-dispatcher {
      type = akka.testkit.CallingThreadDispatcherConfigurator
    }
  }

  actor {
    enable-additional-serialization-bindings = on
    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
  }
}

## akka.actor.allow-java-serialization = on
akka.actor.serialization-bindings {
  "com.github.j5ik2o.akka.persistence.dynamodb.example.CborSerializable" = jackson-cbor
}

akka.persistence.journal.plugin = "j5ik2o.dynamo-db-journal"
akka.persistence.snapshot-store.plugin = "j5ik2o.dynamo-db-snapshot"
akka.persistence.state.plugin = "j5ik2o.dynamo-db-state"

j5ik2o.dynamo-db-journal {
  class = "com.github.j5ik2o.akka.persistence.dynamodb.journal.DynamoDBJournal"
  table-name = "Journal"
  table-name = ${?J5IK2O_DYNAMO_DB_JOURNAL_TABLE_NAME}
  get-journal-rows-index-name = "GetJournalRowsIndex"
  get-journal-rows-index-name = ${?J5IK2O_DYNAMO_DB_JOURNAL_GET_JOURNAL_ROWS_INDEX_NAME}

  soft-delete = false

  dynamo-db-client {
    access-key-id = "x"
    access-key-id = ${?J5IK2O_DYNAMO_DB_JOURNAL_DYNAMO_DB_CLIENT_ACCESS_KEY_ID}
    secret-access-key = "x"
    secret-access-key = ${?J5IK2O_DYNAMO_DB_JOURNAL_DYNAMO_DB_CLIENT_SECRET_ACCESS_KEY}
    endpoint = "http://localhost:8000/"
    endpoint = ${?J5IK2O_DYNAMO_DB_JOURNAL_DYNAMO_DB_CLIENT_ENDPOINT}
  }
}

j5ik2o.dynamo-db-snapshot {
  class = "com.github.j5ik2o.akka.persistence.dynamodb.snapshot.DynamoDBSnapshotStore"
  table-name = "Snapshot"
  table-name = ${?J5IK2O_DYNAMO_DB_SNAPSHOT_TABLE_NAME}

  dynamo-db-client {
    access-key-id = "DUMMY"
    access-key-id = ${?J5IK2O_DYNAMO_DB_JOURNAL_DYNAMO_DB_CLIENT_ACCESS_KEY_ID}
    secret-access-key = "DUMMY"
    secret-access-key = ${?J5IK2O_DYNAMO_DB_JOURNAL_DYNAMO_DB_CLIENT_SECRET_ACCESS_KEY}
    endpoint = "http://localhost:8000/"
    endpoint = ${?J5IK2O_DYNAMO_DB_JOURNAL_DYNAMO_DB_CLIENT_ENDPOINT}
  }
}


j5ik2o.dynamo-db-state {
  class = "com.github.j5ik2o.akka.persistence.dynamodb.state.DynamoDBDurableStateStoreProvider"
  table-name = "State"
  table-name = ${?J5IK2O_DYNAMO_DB_STATE_TABLE_NAME}

  dynamo-db-client {
    access-key-id = "x"
    access-key-id = ${?J5IK2O_DYNAMO_DB_STATE_DYNAMO_DB_CLIENT_ACCESS_KEY_ID}
    secret-access-key = "x"
    secret-access-key = ${?J5IK2O_DYNAMO_DB_STATE_DYNAMO_DB_CLIENT_SECRET_ACCESS_KEY}
    endpoint = "http://localhost:8000/"
    endpoint = ${?J5IK2O_DYNAMO_DB_STATE_DYNAMO_DB_CLIENT_ENDPOINT}
  }
}


