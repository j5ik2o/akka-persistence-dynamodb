j5ik2o {

  dynamo-db-snapshot {
    class = "com.github.j5ik2o.akka.persistence.dynamodb.snapshot.DynamoDBSnapshotStore"
    plugin-dispatcher = "akka.actor.default-dispatcher"

    # support for legacy config format.
    # true if reading old format configuration files, but normally should be false.
    legacy-config-format = false

    # support for legacy table format.
    # true if reading old format configuration files, but normally should be false.
    legacy-table-format = false

    v1-async-client-factory-class-name = ${j5ik2o.dynamo-db-defaults.v1-async-client-factory-class-name}
    v1-sync-client-factory-class-name = ${j5ik2o.dynamo-db-defaults.v1-sync-client-factory-class-name}
    v1-dax-async-client-factory-class-name = ${j5ik2o.dynamo-db-defaults.v1-dax-async-client-factory-class-name}
    v1-dax-sync-client-factory-class-name = ${j5ik2o.dynamo-db-defaults.v1-dax-sync-client-factory-class-name}
    v2-async-client-factory-class-name = ${j5ik2o.dynamo-db-defaults.v2-async-client-factory-class-name}
    v2-sync-client-factory-class-name = ${j5ik2o.dynamo-db-defaults.v2-sync-client-factory-class-name}
    v2-dax-async-client-factory-class-name = ${j5ik2o.dynamo-db-defaults.v2-dax-async-client-factory-class-name}
    v2-dax-sync-client-factory-class-name = ${j5ik2o.dynamo-db-defaults.v2-dax-sync-client-factory-class-name}

    # column name defines
    columns-def {
      partition-key-column-name = "pkey"
      sort-key-column-name = "skey"
      persistence-id-column-name = "persistence-id"
      sequence-nr-column-name = "sequence-nr"
      snapshot-column-name = "snapshot"
      created-column-name = "created"
      tags-column-name = "tags"
    }

    # the table name of snapshot
    table-name = "Snapshot"

    # the index name to read snapshot rows
    get-snapshot-rows-index-name = "GetSnapshotRowsIndex"

    # consistent reads are possible, but at a higher cost.
    consistent-read = false

    # the logical shard count
    shard-count = 64

    # specify the name of the provider class to generate the `PartitionKeyResolver`. Normally, you do not need to change this setting.
    partition-key-resolver-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.snapshot.PartitionKeyResolverProvider$Default"

    # `partition-key-resolver-class-name` specifies the implementation class that generates `pkey` from `PersistenceId` and `Sequence Number`.
    partition-key-resolver-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.snapshot.PartitionKeyResolver$SequenceNumberBased"

    # specify the name of the provider class to generate the `SorkeyKeyResolver`. Normally, you do not need to change this setting.
    sort-key-resolver-provider-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.snapshot.SortKeyResolverProvider$Default"

    # `sort-key-resolver-class-name` specifies the implementation class that generates `skey` from `PersistenceId` and `Sequence Number`.
    sort-key-resolver-class-name = "com.github.j5ik2o.akka.persistence.dynamodb.snapshot.SortKeyResolver$PersistenceIdWithSeqNr"

    write-backoff = ${j5ik2o.dynamo-db-defaults.write-backoff}

    read-backoff  = ${j5ik2o.dynamo-db-defaults.read-backoff}

    dynamo-db-client = ${j5ik2o.dynamo-db-defaults.dynamo-db-client}

    metrics-reporter-provider-class-name = ${j5ik2o.dynamo-db-defaults.metrics-reporter-provider-class-name}

    metrics-reporter-class-name = ${j5ik2o.dynamo-db-defaults.metrics-reporter-class-name}

    trace-reporter-provider-class-name = ${j5ik2o.dynamo-db-defaults.trace-reporter-provider-class-name}

    trace-reporter-class-name = ${j5ik2o.dynamo-db-defaults.trace-reporter-class-name}

  }

}
